#version 460

layout(binding = 0, rgba32f) restrict readonly image2D InImage;
layout(binding = 1, rgba32f) image2D OutImage;
layout(binding = 0) uniform vec4 Options; // Mode, Threshold, Knee, Tent Radius

#define CLAMP_TO_SIZE(x) clamp(x, ivec2(0), size)

#define PREFILTER 0
#define DOWNSAMPLE 1
#define UPSAMPLE 2

vec3 SampleBox(ivec2 coord, ivec2 size);
vec3 DownsampleBox(ivec2 coord, ivec2 size);
vec3 UpsampleTent(ivec2 coord, ivec2 size, int radius);
vec3 Prefilter(vec3 color);

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    vec3 outColor = vec3(0);

    if(int(Options.x) == PREFILTER)
        outColor = Prefilter(DownsampleBox(ivec2(gl_GlobalInvocationID.xy << 1), imageSize(InImage)));
    else if(int(Options.x) == DOWNSAMPLE)
        outColor = DownsampleBox(ivec2(gl_GlobalInvocationID.xy << 1), imageSize(InImage));
    else if (int(Options.x) == UPSAMPLE)
        outColor = imageLoad(OutImage, ivec2(gl_GlobalInvocationID)).rgb + UpsampleTent(ivec2(gl_GlobalInvocationID.xy >> 1), imageSize(InImage), int(Options.w));

    imageStore(OutImage, ivec2(gl_GlobalInvocationID), vec4(outColor, 1));
}

vec3 Prefilter(vec3 color)
{
    color = min(color, vec3(20));

    float brightness = max(color.r, color.g, color.b);
    float rq = clamp(brightness - Options.y - Options.z, 0.0, Options.z * 2);
    rq *= rq * (0.25 / Options.z);

    return max(rq, brightness - Options.y) / max(brightness, 1.0e-4);
}

vec3 UpsampleTent(ivec2 coord, ivec2 size, int radius)
{
    vec3 texSample = vec3(0);

    texSample += imageLoad(InImage, coord) * 0.25;

    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(1, 0) * radius)).rgb * 0.125;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(0, 1) * radius)).rgb * 0.125;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(-1, 0) * radius)) * 0.125;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(0, -1) * radius)) * 0.125;

    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(1, 1) * radius)) * 0.0625;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(-1, 1) * radius)) * 0.0625;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(1, -1) * radius)) * 0.0625;
    texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord + ivec2(-1, -1) * radius)) * 0.0625;
}

vec3 DownsampleBox(ivec2 coord, ivec2 size)
{
    // Original source used bilinear fetches, but I'm never going to be in the middle of a pixel.
    vec3 texSample = vec3(0);

    texSample = SampleBox(coord, size) * 0.5;
    texSample = SampleBox(coord - ivec2(1), size) * 0.125;
    texSample = SampleBox(coord + ivec2(1), size) * 0.125;
    texSample = SampleBox(coord + ivec2(-1, 1), size) * 0.125;
    texSample = SampleBox(coord + ivec2(1, -1), size) * 0.125;

    return texSample;
}

vec3 SampleBox(ivec2 coord, ivec2 size)
{
    vec3 texSample = vec3(0);

    #pragma unroll
    for(int i = 0; i < 9; i++) texSample += imageLoad(InImage, CLAMP_TO_SIZE(coord - 1 + ivec2(i / 3, i % 3))).rgb;

    return texSample / 9;
}
