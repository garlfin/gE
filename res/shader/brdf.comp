#version 460 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in ;
layout (binding = 0, rg32f) restrict writeonly uniform image2D brdfOut;

const float PI = 3.14159265359;

#define SAMPLES 1024

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates - halfway vector
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space H vector to world-space sample vector
    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (roughness * roughness) / 8.0;

    float denom = NdotV * (1.0 - k) + k;

    return NdotV / denom;
}

float G_Smith(float roughness, float NdotV, float NdotL)
{
    return GeometrySchlickGGX(NdotV, roughness) * GeometrySchlickGGX(NdotL, roughness);
}

vec2 IntegrateBRDF(float NoV, float Roughness) {
    vec3 V;
    V.x = sqrt(1.0f - NoV * NoV); // sin
    V.y = 0; V.z = NoV; // cos
    float A = 0;
    float B = 0;

    for (uint i = 0; i < SAMPLES; i++)
    {
        vec2 Xi = Hammersley(i, SAMPLES);
        vec3 H = ImportanceSampleGGX(Xi, vec3(0, 0, 1), Roughness);
        vec3 L = 2 * dot(V, H) * H - V;
        float NoL = clamp(L.z, 0, 1);
        float NoH = clamp(H.z, 0, 1);
        float VoH = clamp(dot(V, H), 0, 1);
        if (NoL > 0)
        {
             float G = G_Smith(Roughness, NoV, NoL);
             float G_Vis = G * VoH / (NoH * NoV);
             float Fc = pow(1 - VoH, 5);

             A += (1 - Fc) * G_Vis;
             B += Fc * G_Vis;
        }
    }
    return vec2(A, B) / SAMPLES;
}

void main() {
    imageStore(brdfOut, ivec2(gl_GlobalInvocationID.xy), vec4(IntegrateBRDF(max(gl_GlobalInvocationID.x / 512.0, 0.01), (gl_GlobalInvocationID.y) / 512.0), 0, 0));
}